% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translateRisk2D.R
\name{translateRisk2D}
\alias{translateRisk2D}
\title{Risk vector for different risk curves}
\usage{
translateRisk2D(x, type, a = 0, b = 0, riskCutoff = 0.01)
}
\arguments{
\item{x}{A numeric vector of distances}

\item{type}{Shape of risk curve: \code{'square'}, \code{'linear'}, \code{'twopartlinear'}, \code{'exponential'},
\code{'logistic'}, or \code{'gaussian'}}

\item{a}{Numeric; maximum distance in raster units of risk}

\item{b}{Numeric; distance in raster units of constant risk (for twopartlinear); must be 
less than \code{a}}

\item{riskCutoff}{Numeric; cutoff where risk is assumed 0 for \code{type = 
'logistic', 'exponential'} or \code{'gaussian'}. Number between 0 and 1}
}
\value{
A numeric vector of risk for each distance in \code{x}
}
\description{
Calculates risk value based on distance for use in the \code{focalWeightRisk} 
function.
}
\examples{
x <- seq(0, 100, 0.01)

# square: Constant risk up to maximum distance a
risk <- translateRisk2D(x, type="square", a=6)
plot(x, risk, type="l", main="square")

# linear: Risk declines linearly up to maximum distance a
risk <- translateRisk2D(x, type="linear", a=50)
plot(x, risk, type="l", main="linear")

# twopartlinear: Constant risk up to distance b, then risk  
# decreases linearly from distance b to a
risk <- translateRisk2D(x, type="twopartlinear", a=50, b=30)
plot(x, risk, type="l", main="twopartlinear")

# exponential: Risk declines exponentially up to distance a 
# where risk = riskCutoff
risk <- translateRisk2D(x, type="exponential", a=50)
plot(x, risk, type="l", main="exponential")

# logistic: Risk declines logistically up to distance a 
# where risk = riskCutoff. Logistic curve midpoint = half 
# of distance a
risk <- translateRisk2D(x, type="logistic", a=50)
plot(x, risk, type="l", main="logistic")

# gaussian: Risk decline follows a gaussian curve up to 
# distance a  where risk = riskCutoff 
risk <- translateRisk2D(x, type="gaussian", a=50)
plot(x, risk, type="l", main="gaussian")
}

